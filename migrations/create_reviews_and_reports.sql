-- Table des rôles utilisateurs
CREATE TABLE IF NOT EXISTS user_roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    role TEXT NOT NULL CHECK (role IN ('admin', 'user')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(user_id)
);

-- Table des avis sur les vendeurs
CREATE TABLE IF NOT EXISTS seller_reviews (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    reviewer_id UUID NOT NULL,
    seller_id UUID NOT NULL,
    rating INTEGER CHECK (rating >= 1 AND rating <= 5) NOT NULL,
    comment TEXT,
    CONSTRAINT fk_reviewer
        FOREIGN KEY(reviewer_id) 
        REFERENCES auth.users(id)
        ON DELETE CASCADE,
    CONSTRAINT fk_seller
        FOREIGN KEY(seller_id) 
        REFERENCES auth.users(id)
        ON DELETE CASCADE,
    UNIQUE(reviewer_id, seller_id)
);

-- Table des signalements
CREATE TABLE IF NOT EXISTS user_reports (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    reporter_id UUID NOT NULL,
    reported_user_id UUID NOT NULL,
    reason TEXT NOT NULL,
    status TEXT CHECK (status IN ('pending', 'reviewed', 'resolved')) DEFAULT 'pending',
    admin_notes TEXT,
    CONSTRAINT fk_reporter
        FOREIGN KEY(reporter_id) 
        REFERENCES auth.users(id)
        ON DELETE CASCADE,
    CONSTRAINT fk_reported_user
        FOREIGN KEY(reported_user_id) 
        REFERENCES auth.users(id)
        ON DELETE CASCADE
);

-- Enable RLS
ALTER TABLE user_roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE seller_reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_reports ENABLE ROW LEVEL SECURITY;

-- Policies pour les rôles
CREATE POLICY "Users can view their own role"
ON user_roles FOR SELECT
TO authenticated
USING (auth.uid() = user_id);

CREATE POLICY "Only super admins can manage roles"
ON user_roles FOR ALL
TO authenticated
USING (
    EXISTS (
        SELECT 1
        FROM user_roles
        WHERE user_roles.user_id = auth.uid()
        AND user_roles.role = 'admin'
    )
);

-- Policies pour les avis
CREATE POLICY "Users can view all reviews"
ON seller_reviews FOR SELECT
TO authenticated
USING (true);

CREATE POLICY "Users can create reviews"
ON seller_reviews FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = reviewer_id);

-- Policies pour les signalements
CREATE POLICY "Only admins and reporters can view reports"
ON user_reports FOR SELECT
TO authenticated
USING (
    auth.uid() = reporter_id OR
    EXISTS (
        SELECT 1
        FROM user_roles
        WHERE user_roles.user_id = auth.uid()
        AND user_roles.role = 'admin'
    )
);

CREATE POLICY "Users can create reports"
ON user_reports FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = reporter_id);

-- Index pour les performances
CREATE INDEX IF NOT EXISTS idx_user_roles_user_id ON user_roles(user_id);
CREATE INDEX IF NOT EXISTS idx_seller_reviews_seller_id ON seller_reviews(seller_id);
CREATE INDEX IF NOT EXISTS idx_seller_reviews_reviewer_id ON seller_reviews(reviewer_id);
CREATE INDEX IF NOT EXISTS idx_user_reports_reported_user_id ON user_reports(reported_user_id);
CREATE INDEX IF NOT EXISTS idx_user_reports_reporter_id ON user_reports(reporter_id);

-- Insérer un administrateur par défaut (remplacez l'UUID par celui de votre utilisateur)
-- INSERT INTO user_roles (user_id, role) VALUES ('votre-uuid-ici', 'admin');
